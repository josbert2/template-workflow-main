$baseColors: (
  primary: scotch-color('primary', 'base'),
  danger:  scotch-color('danger', 'base'),
  success: scotch-color('success', 'base'),
  warning: scotch-color('warning', 'base'),
  pink: scotch-color('pink', 'base'),
  purple: scotch-color('purple', 'base')
);

@function colorMap($baseColors, $variations) {
  $colors:();
  
  @each $color, $value in $baseColors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;
    
    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge($colors, (
         #{$color}-#{$lighten}: lighten($value, $percent),
         #{$color}-#{$darken}:  darken($value, $percent)
      ));
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2*100}: $value));
  }
  @return $colors;
}

@each $color, $value in colorMap($baseColors, 10) {  
  
  .bg--#{$color} { 
    background-color: $value;
  }
  .item--#{$color}{
  	 background-color: #fff;
  	 border-left: 20px solid $value;
  	 display: block;
  	 padding: padding-global(p3);
  	 @include trans(background .3s, $cubic-1);
  	 &:hover{
  	 	background-color: #f5f5f5;
  	 }
  	 .content--color{
  	 	display: flex;
  	 	align-items: center;
  	 	&:hover{

  	 	}
  	 	&::before {
	      content: '#{$value}';
	      float: right;
	      text-transform: uppercase;
	      font-size: fontSize(h5);
	    }
  	 }
  	 

  }

}

.pallete--content{
	
	margin-bottom: margin-global(m2);
	border-radius: margin-global(m3);
	@include shadow(1.2);
	span{
		margin-bottom: margin-global(m5);
		display: block;
	}
}


